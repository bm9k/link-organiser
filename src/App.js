import "./App.css";

import { useState } from "react";

function useLocalStorage(key, initialValue) {
  const [value, setStateValue] = useState(() => {
    const item = window.localStorage.getItem(key);
    return item ? JSON.parse(item) : initialValue;
  });

  const setValue = (value) => {
    setStateValue(value);
    window.localStorage.setItem(key, JSON.stringify(value));
  };

  return [value, setValue];
}

function fisherYates(array, rng) {
  if (!rng) {
    rng = Math.random
  }
  var count = array.length,
    randomnumber,
    temp;
  while (count) {
    randomnumber = (rng() * count--) | 0;
    temp = array[count];
    array[count] = array[randomnumber];
    array[randomnumber] = temp;
  }
}

function stableUnique(array) {
  const seen = new Set();
  const result = [];
  for (const value of array) {
    if (seen.has(value)) {
      continue;
    }

    seen.add(value);
    result.push(value);
  }

  return result;
}

function sfc32(a, b, c, d) {
  return function () {
    a |= 0;
    b |= 0;
    c |= 0;
    d |= 0;
    var t = (((a + b) | 0) + d) | 0;
    d = (d + 1) | 0;
    a = b ^ (b >>> 9);
    b = (c + (c << 3)) | 0;
    c = (c << 21) | (c >>> 11);
    c = (c + t) | 0;
    return (t >>> 0) / 4294967296;
  };
}

function createRng(seed) {
  const [a, b, c] = [
    3141592653, // pi
    2718281828, // e
    1414213562, // sqrt(2)
  ];

  return sfc32(a, b, c, seed);
}

export default function App() {
  const [lines, setLines] = useLocalStorage("lines", "");
  // 1 can never be generated by Math.random() -> [0, 1)
  const [seed, setSeed] = useLocalStorage("seed", 1);
  const [anon, setAnon] = useLocalStorage("anonymous", false);
  const [unique, setUnique] = useLocalStorage("unique", false);

  let links = lines.split("\n").filter((line) => line.trim());

  if (unique) {
    links = stableUnique(links);
  }

  const intSeed = seed === 1 ? null : (seed * (2 << 29)) | 0;

  if (seed !== 1) {
    const rng = createRng(intSeed)
    fisherYates(links, rng);
  }

  return (
    <div className="App">
      <div className="actions">
        <button onClick={() => setSeed(Math.random())}>Shuffle</button>
        <button onClick={() => setSeed(1)}>Reset</button>
      </div>
      <div>
        Anonymous:{" "}
        <input
          type="checkbox"
          checked={anon}
          onChange={(e) => setAnon(e.target.checked)}
        />
      </div>
      <div>
        Unique:{" "}
        <input
          type="checkbox"
          checked={unique}
          onChange={(e) => setUnique(e.target.checked)}
        />
      </div>
      <ol>
        {links.map((link, i) => {
          const text = anon ? `link ${i + 1}` : link;
          return (
            <li key={`${i},${link}`}>
              <a href={link} target="_external">
                {text}
              </a>
            </li>
          );
        })}
      </ol>
      <textarea
        rows="10"
        style={{ width: "100%" }}
        onChange={(e) => setLines(e.target.value) && setSeed(1)}
        value={lines}
      ></textarea>
      <p>Seed: {seed},{intSeed}</p>
    </div>
  );
}
